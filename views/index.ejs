<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="icon"
      type="image/png"
      href="./chess-app/public/assets/chess.png"
    />

    <title>Multiplayer Chess @UtGame</title>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@3.4.1/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <style>
      :root {
        --light-square: #f0d9b5;
        --dark-square: #b58863;
        --board-border: #7c5b3f;
        --highlight-square: rgba(255, 255, 0, 0.5);
      }
      body {
        color: #333;
        background-color: #312e2b;
      }
      .chessboard {
        display: grid;
        grid-template-columns: repeat(8, minmax(0, 1fr));
        grid-template-rows: repeat(8, minmax(0, 1fr));
        width: 500px;
        height: 500px;
        border: 12px solid var(--board-border);
        border-radius: 8px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        position: relative;
      }
      /* .chessboard.flipped {
        transform: rotate(180deg);
      }
      .chessboard.flipped .piece {
        transform: rotate(180deg);
      } */
      .board-coordinates {
        display: flex;
        align-items: center;
        justify-content: center;
        color: rgba(255, 255, 255, 0.8);
        font-weight: bold;
        user-select: none;
        font-size: 14px;
        position: absolute;
      }
      .file-coordinate {
        bottom: -30px;
        width: 12.5%;
        text-align: center;
      }
      .rank-coordinate {
        left: -30px;
        height: 12.5%;
        display: flex;
        align-items: center;
      }
      /* .coordinates-container.flipped .file-coordinate {
        bottom: auto;
        top: -30px;
      }
      .coordinates-container.flipped .rank-coordinate {
        left: auto;
        right: -30px;
      } */
      .piece {
        font-size: 44px;
        cursor: pointer;
        transition: transform 0.2s;
        user-select: none;
        color: #333;
      }
      .piece.draggable {
        cursor: grab;
      }
      .dragging {
        opacity: 0.7;
        transform: scale(1.1);
      }
      .square {
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color 0.2s;
      }
      .square.light {
        background-color: var(--light-square);
      }
      .square.dark {
        background-color: var(--dark-square);
      }
      .square.highlight {
        background-color: var(--highlight-square);
      }
      .square:hover {
        box-shadow: inset 0 0 0 3px rgba(173, 216, 230, 0.7);
      }
      .game-controls {
        margin-top: 20px;
        display: flex;
        gap: 10px;
        justify-content: center;
      }
      .btn {
        padding: 8px 16px;
        border-radius: 6px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        position: relative;
        overflow: hidden;
      }
      .btn:hover {
        transform: translateY(-2px);
      }
      .btn:active {
        transform: translateY(0);
      }
      .btn::after {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        width: 5px;
        height: 5px;
        background: rgba(34, 197, 94, 0.5);
        opacity: 0;
        border-radius: 100%;
        transform: scale(1, 1) translate(-50%);
        transform-origin: 50% 50%;
      }
      .btn:hover::after {
        animation: ripple 1s ease-out;
      }
      @keyframes ripple {
        0% {
          transform: scale(0, 0);
          opacity: 0.5;
        }
        100% {
          transform: scale(20, 20);
          opacity: 0;
        }
      }
      .game-container {
        display: flex;
        align-items: flex-start;
        justify-content: center;
        gap: 2rem;
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
      }
      .sidebar {
        background: #f9f9f9;
        color: #333;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        width: 200px;
        min-width: 180px;
        height: 500px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
      }
      .sidebar .player-info {
        padding: 0.5rem;
        border-radius: 6px;
        background: #ececec;
        margin-bottom: 1rem;
        text-align: center;
      }
      .sidebar .player-info:last-child {
        margin-top: 1rem;
        margin-bottom: 0;
      }
      .captured-pieces-display {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        min-height: 80px;
        border: 1px solid rgba(0, 0, 0, 0.05);
        padding: 0.5rem;
        border-radius: 4px;
        background: #f2f2f2;
        max-height: 300px;
        overflow-y: auto;
      }
      .captured-piece {
        font-size: 28px;
        line-height: 1;
        color: #333;
      }
      .turn-indicator {
        background: #e3f2fd;
        color: #1976d2;
        padding: 0.75rem;
        border-radius: 6px;
        text-align: center;
        font-weight: 600;
        margin-bottom: 1rem;
        border: 2px solid #bbdefb;
      }
      .turn-indicator.active {
        background: #4caf50;
        color: white;
        border-color: #388e3c;
        animation: pulse 2s infinite;
      }
      @keyframes pulse {
        0% {
          box-shadow: 0 0 0 0 rgba(76, 175, 80, 0.7);
        }
        70% {
          box-shadow: 0 0 0 10px rgba(76, 175, 80, 0);
        }
        100% {
          box-shadow: 0 0 0 0 rgba(76, 175, 80, 0);
        }
      }
    </style>
  </head>
  <body class="min-h-screen flex flex-col items-center justify-center p-4">
    <h1 class="text-3xl font-bold text-orange-200 mb-6 shadow-lg">
      Multiplayer Chess Game
    </h1>

    <div id="turn-display" class="turn-indicator">
      Waiting for game to start...
    </div>

    <div class="game-container">
      <div class="sidebar">
        <div class="player-info">
          <div id="player2" class="font-semibold text-lg">
            Player 2 (Black): Waiting...
          </div>
        </div>
        <div>
          <h3 class="font-bold text-lg mb-2">Captured by White:</h3>
          <div id="white-captured-pieces" class="captured-pieces-display"></div>
        </div>
      </div>

      <div class="flex flex-col items-center">
        <div
          class="relative mx-auto coordinates-container"
          id="coordinates-container"
        >
          <div class="chessboard" id="chessboard"></div>
        </div>

        <div class="game-controls">
          <button
            class="btn bg-green-600 text-white hover:bg-green-700"
            id="new-game"
          >
            New Game
          </button>
          <button
            class="btn bg-orange-600 text-white hover:bg-orange-700"
            id="undo-move"
          >
            Undo Move
          </button>
        </div>
      </div>

      <div class="sidebar">
        <div>
          <h3 class="font-bold text-lg mb-2">Captured by Black:</h3>
          <div id="black-captured-pieces" class="captured-pieces-display"></div>
        </div>
        <div class="player-info">
          <div id="player1" class="font-semibold text-lg">
            Player 1 (White): Waiting...
          </div>
        </div>
      </div>
    </div>

    <script
      src="https://cdn.socket.io/4.8.1/socket.io.min.js"
      integrity="sha384-mkQ3/7FUtcGyoppY6bz/PORYoGqOl7/aSUMn2ymDOJcapfS6PHqxhRTMh1RR0Q6+"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.3/chess.min.js"
      integrity="sha512-xRllwz2gdZciIB+AkEbeq+gVhX8VB8XsfqeFbUh+SzHlN96dEduwtTuVuc2u9EROlmW9+yhRlxjif66ORpsgVA=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script>
      const socket = io();
      const chess = new Chess();
      let playerRole = null;
      let isFlipped = false;

      const chessboard = document.getElementById("chessboard");
      const coordinatesContainer = document.getElementById(
        "coordinates-container"
      );
      const player1Status = document.getElementById("player1");
      const player2Status = document.getElementById("player2");
      const whiteCapturedPiecesDisplay = document.getElementById(
        "white-captured-pieces"
      );
      const blackCapturedPiecesDisplay = document.getElementById(
        "black-captured-pieces"
      );
      const turnDisplay = document.getElementById("turn-display");

      let draggedPiece = null;
      let sourceSquare = null;

      function flipBoard() {
        isFlipped = !isFlipped;
        chessboard.classList.toggle("flipped", isFlipped);
        coordinatesContainer.classList.toggle("flipped", isFlipped);
        updateCoordinates();
      }

      function updateCoordinates() {
        const rankCoords =
          coordinatesContainer.querySelectorAll(".rank-coordinate");
        const fileCoords =
          coordinatesContainer.querySelectorAll(".file-coordinate");

        if (isFlipped) {
          rankCoords.forEach((coord, index) => {
            coord.textContent = index + 1;
          });
          fileCoords.forEach((coord, index) => {
            coord.textContent = String.fromCharCode(104 - index);
          });
        } else {
          rankCoords.forEach((coord, index) => {
            coord.textContent = 8 - index;
          });
          fileCoords.forEach((coord, index) => {
            coord.textContent = String.fromCharCode(97 + index);
          });
        }
      }

      function renderBoard() {
        const board = chess.board();
        chessboard.innerHTML = "";

        const boardArray = isFlipped
          ? board
              .slice()
              .reverse()
              .map((row) => row.slice().reverse())
          : board;

        boardArray.forEach((row, rowIndex) => {
          row.forEach((square, colIndex) => {
            const actualRowIndex = isFlipped ? 7 - rowIndex : rowIndex;
            const actualColIndex = isFlipped ? 7 - colIndex : colIndex;

            const squareElement = document.createElement("div");
            squareElement.classList.add(
              "square",
              (actualRowIndex + actualColIndex) % 2 === 0 ? "light" : "dark"
            );
            squareElement.dataset.row = actualRowIndex;
            squareElement.dataset.col = actualColIndex;

            if (square) {
              const pieceElement = document.createElement("div");
              pieceElement.classList.add("piece");
              pieceElement.textContent = getPieceUnicode(square);
              pieceElement.draggable = true;
              pieceElement.id = `${square.color}${square.type}-${actualRowIndex}${actualColIndex}`;

              pieceElement.addEventListener("dragstart", (e) => {
                if (
                  playerRole === chess.turn() &&
                  playerRole === square.color
                ) {
                  draggedPiece = pieceElement;
                  sourceSquare = { row: actualRowIndex, col: actualColIndex };
                  e.dataTransfer.setData("text/plain", pieceElement.id);
                  setTimeout(() => {
                    pieceElement.classList.add("dragging");
                  }, 0);
                } else {
                  e.preventDefault();
                }
              });

              pieceElement.addEventListener("dragend", () => {
                if (draggedPiece) {
                  draggedPiece.classList.remove("dragging");
                  draggedPiece = null;
                  sourceSquare = null;
                }
              });

              squareElement.appendChild(pieceElement);
            }

            squareElement.addEventListener("dragover", (e) => {
              e.preventDefault();
            });

            squareElement.addEventListener("drop", (e) => {
              e.preventDefault();
              if (!draggedPiece) return;

              const targetSquare = {
                row: parseInt(squareElement.dataset.row),
                col: parseInt(squareElement.dataset.col),
              };

              handleMove(sourceSquare, targetSquare);
            });
            chessboard.appendChild(squareElement);
          });
        });
      }

      function handleMove(source, target) {
        const move = {
          from: `${String.fromCharCode(97 + source.col)}${8 - source.row}`,
          to: `${String.fromCharCode(97 + target.col)}${8 - target.row}`,
          promotion: "q",
        };
        socket.emit("move", move);
      }

      function getPieceUnicode(piece) {
        const unicodePieces = {
          w: {
            p: "♙",
            r: "♖",
            n: "♘",
            b: "♗",
            q: "♕",
            k: "♔",
          },
          b: {
            p: "♟",
            r: "♜",
            n: "♞",
            b: "♝",
            q: "♛",
            k: "♚",
          },
        };
        return unicodePieces[piece.color][piece.type];
      }

      function renderCapturedPieces(captured) {
        whiteCapturedPiecesDisplay.innerHTML = "";
        blackCapturedPiecesDisplay.innerHTML = "";

        captured.white.forEach((piece) => {
          const pieceElement = document.createElement("span");
          pieceElement.classList.add("piece", "captured-piece");
          pieceElement.textContent = piece.symbol;
          whiteCapturedPiecesDisplay.appendChild(pieceElement);
        });

        captured.black.forEach((piece) => {
          const pieceElement = document.createElement("span");
          pieceElement.classList.add("piece", "captured-piece");
          pieceElement.textContent = piece.symbol;
          blackCapturedPiecesDisplay.appendChild(pieceElement);
        });
      }

      function updateTurnDisplay(turnInfo) {
        const playerName = turnInfo.playerName || "Unknown Player";
        const colorName =
          turnInfo.player.charAt(0).toUpperCase() + turnInfo.player.slice(1);

        turnDisplay.textContent = `${colorName}'s Turn - ${playerName}`;

        if (
          (playerRole === "w" && turnInfo.turn === "w") ||
          (playerRole === "b" && turnInfo.turn === "b")
        ) {
          turnDisplay.classList.add("active");
          turnDisplay.textContent = "Your Turn!";
        } else {
          turnDisplay.classList.remove("active");
        }
      }

      socket.on("playerRole", (role) => {
        playerRole = role;
        console.log("You are playing as:", role === "w" ? "White" : "Black");

        if (role === "b") {
          flipBoard();
        }

        const name = prompt("Enter your name:");
        if (name) {
          socket.emit("setName", name);
        }
      });

      socket.on("spectatorRole", () => {
        playerRole = null;
        console.log("You are a spectator.");
        alert("You are a spectator. Two players are already connected.");
      });

      socket.on("playerStatus", (status) => {
        player1Status.textContent = `Player 1 (White): ${
          status.white.connected
            ? status.white.name || "Connected"
            : "Waiting..."
        }`;
        player2Status.textContent = `Player 2 (Black): ${
          status.black.connected
            ? status.black.name || "Connected"
            : "Waiting..."
        }`;
      });

      socket.on("turnStatus", (turnInfo) => {
        updateTurnDisplay(turnInfo);
      });

      socket.on("boardState", (fen) => {
        chess.load(fen);
        renderBoard();
      });

      socket.on("capturedPieces", (captured) => {
        renderCapturedPieces(captured);
      });

      socket.on("invalidMove", (message) => {
        alert("Invalid Move: " + message);
        renderBoard();
      });

      socket.on("inCheck", (color) => {
        alert(`${color === "w" ? "White" : "Black"} is in check!`);
      });

      socket.on("gameOver", (data) => {
        if (data.winner) {
          alert(`Game Over! ${data.winner} wins by ${data.reason}!`);
        } else {
          alert(`Game Over! Draw by ${data.reason}!`);
        }
      });

      socket.on("gameReset", () => {
        turnDisplay.textContent = "Game Reset - White's Turn";
        turnDisplay.classList.remove("active");
      });

      document
        .getElementById("new-game")
        ?.addEventListener("click", function () {
          socket.emit("newGame");
        });

      document
        .getElementById("undo-move")
        ?.addEventListener("click", function () {
          socket.emit("undoMove");
        });

      renderBoard();
    </script>
  </body>
</html>
